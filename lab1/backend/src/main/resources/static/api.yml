openapi: 3.0.3
info:
  title: Backend API
  version: "1.0.0"
servers:
  - url: /
security:
  - bearerAuth: [ ]
tags:
  - name: Objects
    description: управление объектами
  - name: Utils
    description: вспомогательные методы управления объектами
  - name: Search
    description: методы поиска объектов
  - name: Users
    description: управление пользователями

paths:
  /api/v1/objects/test:
    post:
      summary: Добавить тестовые объекты
      description: Добавляет 10 тестовых объектов в систему.
      security:
        - bearerAuth: [ ]
      tags: [ Utils ]
      operationId: createTestObjects
      responses:
        "200":
          description: Тестовые объекты успешно созданы.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"
  /api/v1/objects:
    post:
      summary: Добавить новый объект
      description: Добавляет новый объект в систему.
      security:
        - bearerAuth: [ ]
      tags: [ Objects ]
      operationId: createObject
      requestBody:
        description: объект для добавления
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookCreatureDto"
      responses:
        "200":
          description: Объект успешно создан.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookCreatureDto"
        "400":
          description: Клиентский запрос некорректен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"
    get:
      summary: Получить список объектов
      description: Возвращает список всех объектов в системе.
      security:
        - bearerAuth: [ ]
      tags: [ Objects ]
      operationId: getObjects
      parameters:
        - name: page
          in: query
          description: Номер страницы (0-based)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Размер страницы
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: Сортировка в формате поле,asc|desc. Можно указать несколько.
          required: false
          schema:
            type: string
            default: id,asc
      responses:
        "200":
          description: Список объектов успешно получен.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedBookCreaturePage"
        "400":
          description: Клиентский запрос некорректен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"

  /api/v1/objects/{id}:
    patch:
      summary: Обновить существующий объект
      description: Обновляет данные существующего объекта в системе.
      security:
        - bearerAuth: [ ]
      tags: [ Objects ]
      operationId: patchObject
      parameters:
        - name: id
          in: path
          description: Идентификатор объекта для обновления
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: объект для обновления
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookCreatureDto"
      responses:
        "200":
          description: Объект успешно обновлен.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookCreatureDto"
        "400":
          description: Клиентский запрос некорректен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"
    get:
      summary: Получить объект по ID
      description: Возвращает данные объекта по его идентификатору.
      security:
        - bearerAuth: [ ]
      tags: [ Objects ]
      operationId: getObjectById
      parameters:
        - name: id
          in: path
          description: Идентификатор объекта для обновления
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Объект успешно получен.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookCreatureDto"
        "400":
          description: Клиентский запрос некорректен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"
    delete:
      summary: Удалить объект по ID
      description: Удаляет объект из системы по его идентификатору.
      security:
        - bearerAuth: [ ]
      tags: [ Objects ]
      operationId: deleteObjectById
      parameters:
        - name: id
          in: path
          description: Идентификатор объекта для обновления
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Объект успешно удален.
        "400":
          description: Клиентский запрос некорректен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"
        "403":
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"
  /api/v1/users/signup:
    post:
      tags: [ Users ]
      summary: Зарегистрировать нового пользователя
      operationId: signup
      requestBody:
        description: Данные для регистрации нового пользователя
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignupRequest"
      responses:
        "200":
          description: Пользователь успешно зарегистрирован
        "400":
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"
        "500":
          description: Внутренняя ошибка сервера
  /api/v1/users/me:
    get:
      tags: [ Users ]
      summary: Получить информацию о текущем пользователе
      operationId: getCurrentUser
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Информация о текущем пользователе
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomUserDetailsDto"
        "401":
          description: Пользователь не аутентифицирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattedApiException"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT для авторизации запросов"

  schemas:
    CustomUserDetailsDto:
      type: object
      properties:
        sub:
          type: string
        email_verified:
          type: boolean
        allowed-origins:
          type: array
          items:
            type: string
        realm_access:
          $ref: '#/components/schemas/RealmAccessDto'
        resource_access:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceRolesDto'
        iss:
          type: string
        preferred_username:
          type: string
        given_name:
          type: string
        family_name:
          type: string
          nullable: true
        sid:
          type: string
        acr:
          type: string
        azp:
          type: string
        scope:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        exp:
          type: string
          format: date-time
        iat:
          type: string
          format: date-time
        jti:
          type: string
      required:
        - sub
        - email_verified
        - allowed-origins
        - realm_access
        - resource_access
        - iss
        - preferred_username
        - given_name
        - sid
        - acr
        - azp
        - scope
        - name
        - email
        - exp
        - iat
        - jti
    RealmAccessDto:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
      required:
        - roles
    ResourceRolesDto:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
      required:
        - roles
    FormattedApiException:
      type: object
      description: "Ошибки API (в т.ч. 500)"
      properties:
        errorCode:
          type: string
          description: "Код ошибки"
        message:
          type: string
          description: "Локализованное описание ошибки"
      required:
        - errorCode
    FormattedBookCreaturePage:
      type: object
      description: "Форматированная страница с данными и метаданными пагинации"
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/BookCreatureDto'
        page:
          type: integer
          description: "Номер страницы (0..N)"
        size:
          type: integer
          description: "Размер страницы"
        totalElements:
          type: integer
          description: "Общее количество элементов"
        totalPages:
          type: integer
          description: "Общее количество страниц"
        last:
          type: boolean
          description: "Является ли текущая страница последней"
      required:
        - content
        - page
        - size
        - totalElements
        - totalPages
        - last
    BookCreatureDto:
      type: object
      description: Сущность волшебного существа (BookCreature)
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          description: Уникальный идентификатор (генерируется автоматически)
        ownerSub:
          type: string
          maxLength: 128
          readOnly: true
          description: Идентификатор владельца (заполняется автоматически)
        ownerEmail:
          type: string
          format: email
          readOnly: true
          description: Электронная почта владельца (заполняется автоматически)
        name:
          type: string
          maxLength: 200
          description: Имя существа (обязательное поле)
        coordinates:
          $ref: '#/components/schemas/CoordinatesDto'
        age:
          type: integer
          format: int64
          minimum: 1
          nullable: true
          description: Возраст (> 0), может отсутствовать
        creatureType:
          $ref: '#/components/schemas/BookCreatureType'
        creatureLocation:
          $ref: '#/components/schemas/MagicCityDto'
        attackLevel:
          type: integer
          format: int64
          minimum: 1
          description: Уровень атаки (≥ 1)
        defenseLevel:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: Уровень защиты (> 0)
        ring:
          $ref: '#/components/schemas/RingDto'
        creationDate:
          type: string
          format: date-time
          readOnly: true
          description: Дата создания (timestamptz)
        lastModifiedDate:
          type: string
          format: date-time
          readOnly: true
          description: Дата последнего изменения (timestamptz)
      required:
        - ownerSub
        - name
        - coordinates
        - creatureType
        - creatureLocation
        - attackLevel
        - defenseLevel
    MagicCityDto:
      type: object
      description: Магический город
      properties:
        name:
          type: string
          maxLength: 200
          description: Название города (обязательное поле)
        area:
          type: number
          format: double
          minimum: 0
          description: Площадь города (обязательное поле, > 0)
        population:
          type: integer
          format: int64
          minimum: 0
          description: Население города (обязательное поле, > 0)
        establishmentDate:
          type: string
          format: date-time
          nullable: true
          description: Дата основания города
        governor:
          $ref: '#/components/schemas/HumanDto'
        isCapital:
          type: boolean
          nullable: true
          description: Является ли столицей
        populationDensity:
          type: number
          format: double
          minimum: 0
          description: Плотность населения (> 0)
      required:
        - name
        - area
        - population
        - governor
        - populationDensity
    CoordinatesDto:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: integer
          format: int64
          maximum: 109
          description: "Максимальное значение: 109"
        y:
          type: number
          format: float
          description: "Координата Y"
    HumanDto:
      type: object
      properties:
        birthday:
          type: string
          format: date
    RingDto:
      type: object
      description: Волшебное кольцо
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          description: Уникальный идентификатор (генерируется автоматически)
        name:
          type: string
          maxLength: 200
          description: Название кольца (обязательное поле)
        weight:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: Вес кольца (> 0)
      required:
        - name
        - weight
    UserSignupRequest:
      type: object
      description: "Данные для регистрации нового пользователя"
      properties:
        password:
          type: string
          description: "Пароль пользователя"
          example: "securePassword123!"
        passwordRepeat:
          type: string
          description: "Повтор пароля для подтверждения"
          example: "securePassword123!"
        email:
          type: string
          format: email
          description: "Электронная почта пользователя"
          example: "aboba@mail.ru"
    BookCreatureType:
      type: string
      enum:
        - HOBBIT
        - ELF
        - HUMAN
